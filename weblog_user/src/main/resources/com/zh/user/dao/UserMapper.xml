<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.zh.user.dao.UserMapper">
  <resultMap id="BaseResultMap" type="com.zh.user.entity.User">
    <id column="id" jdbcType="INTEGER" property="id" />
    <result column="nickname" jdbcType="VARCHAR" property="nickname" />
    <result column="username" jdbcType="VARCHAR" property="username" />
    <result column="phone" jdbcType="CHAR" property="phone" />
    <result column="email" jdbcType="VARCHAR" property="email" />
    <result column="password" jdbcType="CHAR" property="password" />
    <result column="oneword" jdbcType="VARCHAR" property="oneword" />
    <result column="url" jdbcType="VARCHAR" property="url" />
    <result column="state" jdbcType="TINYINT" property="state" />
    <result column="create_time" jdbcType="TIMESTAMP" property="createTime" />
  </resultMap>
  <resultMap extends="BaseResultMap" id="ResultMapWithBLOBs" type="com.zh.user.entity.User">
    <result column="head" jdbcType="LONGVARCHAR" property="head" />
  </resultMap>
  <sql id="Base_Column_List">
    id, nickname, username, phone, email, password, oneword, url, state, create_time
  </sql>
  <sql id="Blob_Column_List">
    head
  </sql>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="ResultMapWithBLOBs">
    select 
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from blog_user
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from blog_user
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <insert id="insert" parameterType="com.zh.user.entity.User">
    insert into blog_user (id, nickname, username, 
      phone, email, password, oneword, 
      url, state, create_time, 
      head)
    values (#{id,jdbcType=INTEGER}, #{nickname,jdbcType=VARCHAR}, #{username,jdbcType=VARCHAR}, 
      #{phone,jdbcType=CHAR}, #{email,jdbcType=VARCHAR}, #{password,jdbcType=CHAR}, #{oneword,jdbcType=VARCHAR}, 
      #{url,jdbcType=VARCHAR}, #{state,jdbcType=TINYINT}, #{createTime,jdbcType=TIMESTAMP}, 
      #{head,jdbcType=LONGVARCHAR})
  </insert>

  <!--添加并返回ID-->
  <insert id="insertSelective" parameterType="com.zh.user.entity.User">
    <!-- selectKey指将id放入user对象 (当插入后再获取ID，则order="AFTER)"-->
    <selectKey keyProperty="id" resultType="Integer" order="AFTER">
      select LAST_INSERT_ID()	<!--mysql-->
    </selectKey>

    insert into blog_user
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        id,
      </if>
      <if test="nickname != null">
        nickname,
      </if>
      <if test="username != null">
        username,
      </if>
      <if test="phone != null">
        phone,
      </if>
      <if test="email != null">
        email,
      </if>
      <if test="password != null">
        password,
      </if>
      <if test="oneword != null">
        oneword,
      </if>
      <if test="url != null">
        url,
      </if>
      <if test="state != null">
        state,
      </if>
      <if test="createTime != null">
        create_time,
      </if>
      <if test="head != null">
        head,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="id != null">
        #{id,jdbcType=INTEGER},
      </if>
      <if test="nickname != null">
        #{nickname,jdbcType=VARCHAR},
      </if>
      <if test="username != null">
        #{username,jdbcType=VARCHAR},
      </if>
      <if test="phone != null">
        #{phone,jdbcType=CHAR},
      </if>
      <if test="email != null">
        #{email,jdbcType=VARCHAR},
      </if>
      <if test="password != null">
        #{password,jdbcType=CHAR},
      </if>
      <if test="oneword != null">
        #{oneword,jdbcType=VARCHAR},
      </if>
      <if test="url != null">
        #{url,jdbcType=VARCHAR},
      </if>
      <if test="state != null">
        #{state,jdbcType=TINYINT},
      </if>
      <if test="createTime != null">
        #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="head != null">
        #{head,jdbcType=LONGVARCHAR},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.zh.user.entity.User">
    update blog_user
    <set>
      <if test="nickname != null">
        nickname = #{nickname,jdbcType=VARCHAR},
      </if>
      <if test="username != null">
        username = #{username,jdbcType=VARCHAR},
      </if>
      <if test="phone != null">
        phone = #{phone,jdbcType=CHAR},
      </if>
      <if test="email != null">
        email = #{email,jdbcType=VARCHAR},
      </if>
      <if test="password != null">
        password = #{password,jdbcType=CHAR},
      </if>
      <if test="oneword != null">
        oneword = #{oneword,jdbcType=VARCHAR},
      </if>
      <if test="url != null">
        url = #{url,jdbcType=VARCHAR},
      </if>
      <if test="state != null">
        state = #{state,jdbcType=TINYINT},
      </if>
      <if test="createTime != null">
        create_time = #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="head != null">
        head = #{head,jdbcType=LONGVARCHAR},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKeyWithBLOBs" parameterType="com.zh.user.entity.User">
    update blog_user
    set nickname = #{nickname,jdbcType=VARCHAR},
      username = #{username,jdbcType=VARCHAR},
      phone = #{phone,jdbcType=CHAR},
      email = #{email,jdbcType=VARCHAR},
      password = #{password,jdbcType=CHAR},
      oneword = #{oneword,jdbcType=VARCHAR},
      url = #{url,jdbcType=VARCHAR},
      state = #{state,jdbcType=TINYINT},
      create_time = #{createTime,jdbcType=TIMESTAMP},
      head = #{head,jdbcType=LONGVARCHAR}
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.zh.user.entity.User">
    update blog_user
    set nickname = #{nickname,jdbcType=VARCHAR},
      username = #{username,jdbcType=VARCHAR},
      phone = #{phone,jdbcType=CHAR},
      email = #{email,jdbcType=VARCHAR},
      password = #{password,jdbcType=CHAR},
      oneword = #{oneword,jdbcType=VARCHAR},
      url = #{url,jdbcType=VARCHAR},
      state = #{state,jdbcType=TINYINT},
      create_time = #{createTime,jdbcType=TIMESTAMP}
    where id = #{id,jdbcType=INTEGER}
  </update>
</mapper>